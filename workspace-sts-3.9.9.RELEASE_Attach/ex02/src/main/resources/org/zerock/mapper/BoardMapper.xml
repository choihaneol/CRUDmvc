<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.BoardMapper">
<!--  생성자 -->


<!--  Mapper Xml 파일 : myBatis 는 mapping구문으로 sql database를 쉽게 사용할 수 있음 -->


<!-- 검색조건. <sql>태그를 이용해서 SQL의 일부를 별도로 보관 한뒤 include 시킴 -->
 <sql id="criteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	

<!-- 조회처리 
select : 데이터조회 및 매핑, id : 구문 id(메서드이름과일치),  
resultType : 이 구문에 의해 리턴되는 기대타입의 
패키지 경로를 포함한 전체 클래스명이나 별칭
CDATA : 부등호처  -->
<select id="getList" resultType="org.zerock.domain.BoardVO">    

	<![CDATA[  
		select * from tbl_board where bno > 0  
		]]>
</select>


<!-- 게시물생성(pk값 없을때)
insert : 데이터삽입, id : 구문 id,
insertSelectKey : @SelectKey 사용. PK값을 미리 SQL을 통해서 
미리(BEFORE) 처리 한뒤 특정한 이름으로 결과를보관  -->
<insert id="insert">
		insert into tbl_board (bno,title,content,writer)
		values (seq_board.nextval, #{title}, #{content}, #{writer})
</insert>


<!-- 게시물생성(pk값 있을때) -->
<insert id="insertSelectKey">

		<selectKey keyProperty="bno" order="BEFORE"
			resultType="long">
			select seq_board.nextval from dual
		</selectKey>

		insert into tbl_board (bno,title,content,writer)
		values (#{bno}, #{title}, #{content}, #{writer})
</insert>



<!-- 데이터조회(bno사용, 파라미터명 사용하기도함)  -->
<select id="read" resultType="org.zerock.domain.BoardVO">
		select * from tbl_board where bno = #{bno}
</select>



<!-- delete : 데이터삭제(bno사용, 파라미터명 사용하기도함) -->
<delete id="delete">
		delete tbl_board where bno = #{bno}
</delete>



<!-- update : 데이터수정
updateDate : 최종수정시간
sysdate : 데이터베이스내 현재시간
regdate : 최초생성시간 -->
<update id="update">
		update tbl_board
		set title= #{title},
		content=#{content},
		writer = #{writer},
		updateDate = sysdate
		where bno =
		#{bno}
	</update>



<!-- Criteria(페이지 수, 한페이지당 데이터 수) 를 파라미터로 사용하는 
getListWithPaging에 대한 태그  
<![CDATA[ ]]> : 부등호사용 
모든 칼럼과 ROWNUM을 RN이라는 가명을 이용해서 만들어주고 
바깥쪽 SQL에서는 RN칼럼을 조건으로 처리.
BoardMapper.xml목록과 데이터 개수 처리
 -->
<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO"> 
<![CDATA[  
select bno, title, content, writer, regdate, updatedate 
from 
  ( 
   select /*+INDEX_DESC(tbl_board pk_board) */ 
   rownum rn, bno, title, content, writer, regdate, updatedate 
   from 
     tbl_board 
   where 
   ]]>
   
   
   <trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
   
  <!--  <include refid="criteria"></include> --><!-- <sql>태그를 이용해서 SQL의 일부를 별도로 보관하고 include 시킴 -->
      
  <!--페이지번호(pageNum)과 데이터수(amount)를 변경-->
   <![CDATA[    
      rownum <= #{pageNum} * #{amount}    
      )
  where rn > (#{pageNum} -1) * #{amount}   
  ]]>
	</select>


 <!-- 데이터베이스에서 전체페이지를 받아오는 getTotalCount 메서드 <sql>, <include>-->
	<select id="getTotalCount" resultType="int">
		select count(*) from tbl_board where 
		
		<include refid="criteria"></include> 
		
		bno > 0
		
	</select>

</mapper>